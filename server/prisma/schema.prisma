generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  name         String
  email        String  @unique
  password     String
  hashedRT     String?
  avatarImgUri String  @default("")

  lists         List[]
  titleComments TitleComment[]
  pageComments  PageComment[]
  rating        Rating[]

  role     Role    @default(USER)
  isAdmin  Boolean @default(false)
  isAuthor Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id   Int    @id @default(autoincrement())
  name String

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  titles Title[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  titles Title[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Title {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  type        TitleType   @default(MANGA)
  status      TitleStatus @default(ANNOUNCEMENT)
  yearRelease Int         @default(1990)
  rating      Float       @default(0)

  genres   Genre[]
  chapters Chapter[]
  comments TitleComment[]
  list     List[]
  ratings  Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id     Int    @id @default(autoincrement())
  name   String
  number Int
  volume Int

  Title   Title @relation(fields: [titleId], references: [id], onDelete: Cascade)
  titleId Int

  pages Page[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Page {
  id     Int    @id @default(autoincrement())
  imgUri String
  number Int

  Chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId Int

  comments PageComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageComment {
  id      Int    @id @default(autoincrement())
  message String

  parent   PageComment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children PageComment[] @relation("ParentChild")
  parentId Int?

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TitleComment {
  id      Int    @id @default(autoincrement())
  message String

  parent   TitleComment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children TitleComment[] @relation("ParentChild")
  parentId Int?

  Title   Title @relation(fields: [titleId], references: [id], onDelete: Cascade)
  titleId Int

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id    Int @id @default(autoincrement())
  value Int @default(0)

  title   Title @relation(fields: [titleId], references: [id])
  titleId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([titleId, userId])
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

//ARTIST TODO

enum TitleType {
  MANGA
  MANHWA
  MAMHUA
  COMICS
}

enum TitleStatus {
  ANNOUNCEMENT
  ONGOING
  FINISHED
  SUSPENDED
}
