generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id Int @id @default(autoincrement())

  name String @unique

  titles Title[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())

  name     String
  email    String  @unique
  password String
  hashedRT String?
  imgUrl   String  @default("https://mangalib.me/uploads/users/34417/cszRhLbgYv.jpg")

  lists               List[]
  rating              Rating[]
  pageComments        PageComment[]
  chapterLikes        ChapterLike[]
  titleComments       TitleComment[]
  PageCommentLike     PageCommentLike[]
  TitleCommentLike    TitleCommentLike[]
  PageCommentDislike  PageCommentDislike[]
  TitleCommentDislike TitleCommentDislike[]

  role    Role    @default(USER)
  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id   Int    @id @default(autoincrement())
  name String

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  titles Title[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  titles Title[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Title {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  type        TitleType   @default(MANGA)
  status      TitleStatus @default(ANNOUNCEMENT)
  yearRelease Int         @default(1990)
  rating      Float       @default(0)
  imgUrl      String      @default("https://mangalib.me/sono-bisque-doll-wa-koi-wo-suru")

  Author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  list     List[]
  genres   Genre[]
  ratings  Rating[]
  chapters Chapter[]
  comments TitleComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id    Int   @id @default(autoincrement())
  value Float @default(0)

  title   Title @relation(fields: [titleId], references: [id], onDelete: Cascade)
  titleId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(name: "titleId_userId", [titleId, userId])
}

model TitleComment {
  id         Int    @id @default(autoincrement())
  message    String
  likeAmount Int    @default(0)

  likes    TitleCommentLike[]
  dislikes TitleCommentDislike[]

  parent   TitleComment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children TitleComment[] @relation("ParentChild")
  parentId Int?

  Title   Title @relation(fields: [titleId], references: [id], onDelete: Cascade)
  titleId Int

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TitleCommentLike {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comment   TitleComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id(name: "id", [userId, commentId])
}

model TitleCommentDislike {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comment   TitleComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id(name: "id", [userId, commentId])
}

model Chapter {
  id         Int     @id @default(autoincrement())
  name       String?
  number     Int
  volume     Int
  likeAmount Int     @default(0)

  Title   Title         @relation(fields: [titleId], references: [id], onDelete: Cascade)
  titleId Int
  likes   ChapterLike[]

  pages Page[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChapterLike {
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "id", [chapterId, userId])
}

model Page {
  id     Int    @id @default(autoincrement())
  imgUri String
  number Int

  Chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId Int

  comments PageComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageComment {
  id         Int    @id @default(autoincrement())
  message    String
  likeAmount Int    @default(0)

  likes    PageCommentLike[]
  dislikes PageCommentDislike[]

  parent   PageComment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children PageComment[] @relation("ParentChild")
  parentId Int?

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageCommentLike {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comment   PageComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id(name: "id", [userId, commentId])
}

model PageCommentDislike {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comment   PageComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id(name: "id", [userId, commentId])
}

enum TitleStatus {
  ANNOUNCEMENT
  ONGOING
  FINISHED
  SUSPENDED
}

enum Role {
  USER
  ADMIN
}

enum TitleType {
  MANGA
  MANHWA
  MAMHUA
  COMICS
}
